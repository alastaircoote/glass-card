// Generated by CoffeeScript 1.3.3
(function() {
  var Card, RotateCard, VerticalSwipeCard, direction, state,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  state = {
    DECIDING: 1,
    TRACKING: 2
  };

  direction = {
    VERTICAL: 1,
    HORIZONTAL: 2
  };

  Card = (function() {
    var _decideRadius;

    _decideRadius = 5;

    function Card(el) {
      this.el = el;
      this.touchend = __bind(this.touchend, this);

      this.touchmove = __bind(this.touchmove, this);

      this.touchstart = __bind(this.touchstart, this);

      this.el.on("touchstart", this.touchstart);
      this.el.on("touchmove", this.touchmove);
      this.el.on("touchend", this.touchend);
    }

    Card.prototype._translateTouchCoordinates = function(e) {
      var touch;
      touch = e.originalEvent.targetTouches[0];
      return {
        x: touch.pageX - touch.target.offsetLeft,
        y: touch.pageY - touch.target.offsetTop
      };
    };

    Card.prototype.touchstart = function(e) {
      this.el.removeClass("animated");
      this.startCoords = this._translateTouchCoordinates(e);
      this.startTime = Date.now();
      return this.currentState = state.DECIDING;
    };

    Card.prototype.touchmove = function(e) {
      var xDiff, yDiff;
      this.currentPos = this._translateTouchCoordinates(e);
      if (this.currentState === state.DECIDING) {
        xDiff = Math.abs(this.currentPos.x - this.startCoords.x);
        yDiff = Math.abs(this.currentPos.y - this.startCoords.y);
        if (xDiff < 5 && yDiff < 5) {
          return;
        }
        if (xDiff >= 5) {
          this.moveMode = direction.HORIZONTAL;
        } else {
          this.moveMode = direction.VERTICAL;
        }
        this.currentState = state.TRACKING;
        return this.el.html(this.moveMode);
      }
    };

    Card.prototype.touchend = function(e) {
      var acceleration, distance, endTime, time;
      endTime = Date.now();
      distance = 0;
      if (this.moveMode === direction.HORIZONTAL) {
        distance = Math.abs(this.currentPos.x - this.startCoords.x);
      } else {
        distance = Math.abs(this.currentPos.y - this.startCoords.y);
      }
      time = endTime - this.startTime;
      acceleration = distance / time;
      return {
        acceleration: acceleration,
        distance: distance
      };
    };

    return Card;

  })();

  VerticalSwipeCard = (function(_super) {

    __extends(VerticalSwipeCard, _super);

    function VerticalSwipeCard() {
      this.touchmove = __bind(this.touchmove, this);
      return VerticalSwipeCard.__super__.constructor.apply(this, arguments);
    }

    VerticalSwipeCard.prototype.touchmove = function(e) {
      var cardHeight, percentAcross, topPos;
      e.preventDefault();
      VerticalSwipeCard.__super__.touchmove.call(this, e);
      if (this.currentState === state.TRACKING && this.moveMode === direction.VERTICAL) {
        cardHeight = this.el.height();
        percentAcross = (this.startCoords.y - this.currentPos.y) / cardHeight;
        topPos = $(window).height() * percentAcross;
        return this.el.css("-webkit-transform", "translate3d(0," + (0 - topPos) + "px,0)");
      }
    };

    return VerticalSwipeCard;

  })(Card);

  RotateCard = (function(_super) {

    __extends(RotateCard, _super);

    function RotateCard() {
      this.touchend = __bind(this.touchend, this);

      this.touchmove = __bind(this.touchmove, this);
      return RotateCard.__super__.constructor.apply(this, arguments);
    }

    RotateCard.prototype.touchmove = function(e) {
      var cardWidth, percentAcross, rotateAngle;
      e.preventDefault();
      RotateCard.__super__.touchmove.call(this, e);
      if (this.currentState === state.TRACKING && this.moveMode === direction.HORIZONTAL) {
        cardWidth = this.el.width();
        percentAcross = (this.startCoords.x - this.currentPos.x) / cardWidth;
        rotateAngle = -180 * percentAcross;
        if (rotateAngle < -180) {
          rotateAngle = -180;
        }
        return this.el.css("-webkit-transform", "rotate3d(0,1,0," + rotateAngle + "deg)");
      }
    };

    RotateCard.prototype.touchend = function(e) {
      var cardWidth, stats;
      if (!this.moveMode === direction.HORIZONTAL) {
        return;
      }
      stats = RotateCard.__super__.touchend.call(this, e);
      this.el.html(stats.acceleration);
      cardWidth = this.el.width();
      if (stats.acceleration < 1 && stats.distance < cardWidth / 2) {
        this.el.addClass("animated");
        return this.el.css("-webkit-transform", "");
      } else {
        this.el.addClass("animated");
        return this.el.css("-webkit-transform", "rotate3d(0,1,0,-180deg)");
      }
    };

    return RotateCard;

  })(VerticalSwipeCard);

  new RotateCard($("#cardtarget"));

}).call(this);
